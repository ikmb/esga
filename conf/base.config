/*
 * -------------------------------------------------
 *  genome-annotation Nextflow base config file
 * -------------------------------------------------
 */

process {

	cpus = { 1 * task.attempt }
	memory = { check_max( 8.GB * task.attempt, 'memory') }
	time = { 1.h * task.attempt }

	errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
	maxRetries = 1
	maxErrors = '-1'

	withLabel: short_running {
		time = { check_max(4.h * task.attempt, 'time') }
		memory = { check_max( 8.GB * task.attempt, 'memory') }
		cpus = { 1 * task.attempt }
	}

	withLabel: medium_running {
		time = { check_max(12.h * task.attempt, 'time') }
		memory = { check_max( 16.GB * task.attempt, 'memory') }
                cpus = { 1 * task.attempt }
	}

	withLabel: long_running {
		time = { check_max(48.h * task.attempt, 'time') }
		memory = { check_max( 16.GB * task.attempt, 'memory') }
                cpus = { 1 * task.attempt }
	}

	withLabel: extra_long_running {
		time = { check_max(120.h * task.attempt, 'time') }
		memory = { check_max( 16.GB * task.attempt, 'memory') }
                cpus = { 1 * task.attempt }
	}
	withLabel: satsuma {
		container = "docker://mhoeppner/satsuma2:1.0"
	}
	withLabel: gaas {
		time = { check_max(6.h * task.attempt, 'time') }
                memory = { check_max( 16.GB * task.attempt, 'memory') }
                cpus = { 1 * task.attempt }
		container = "docker://quay.io/biocontainers/gaas:1.2.0--pl526r35_0"
	}
	withLabel: pasa {
		container = "docker://quay.io/biocontainers/pasa:2.4.1--he1b5a44_0"
	}
	withLabel: trinity {
		container = "docker://quay.io/biocontainers/trinity:2.8.5--h8b12597_5"
	}
	withLabel: infernal {
		container = "docker://quay.io/biocontainers/infernal:1.1.3--h516909a_0"
	}
	withLabel: deeptools {
		time = { check_max(6.h * task.attempt, 'time') }
                memory = { check_max( 16.GB * task.attempt, 'memory') }
                cpus = { 8 * task.attempt }
                container = "docker://quay.io/biocontainers/deeptools:3.5.0--py_0"
	}

	withName:repeatModel {
		time = { check_max(120.h * task.attempt, 'time') }
		cpus = 16
		memory = { check_max(32.GB * task.attempt, 'memory') }	
	}
	withName:'repeatMaskLib|repeatMaskSpecies' {
		cpus = params.max_cpus
		memory = { check_max(16.GB * task.attempt, 'memory') }
		time = { check_max(120.h * task.attempt, 'time') }
	}
	withName: infernal_search {
		cpus = 8
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(48.h * task.attempt, 'time') }
	}
	withName: BamToExonHint {
                time = { check_max(24.h * task.attempt, 'time') }
	}
	withName:spalnMakeIndex {
		cpus = 4
		memory = { check_max(16.GB * task.attempt, 'memory') }
		time = { check_max(8.h * task.attempt, 'time') }
	}
	withName:spalnAlign {
		cpus = 8
                memory = { check_max(64.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
	}
	withName:estMinimap {
		cpus = 8
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
        }
	withName:runAugustusBatch {
                cpus = 8
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
        }
	withName:HisatMakeDB {
                cpus = 8
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
        }
	withName:runFastp {
                cpus = 8
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
        }
	withName:HisatMap {
		cpus = 8
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt, 'time') }
	}
	withName:mergeBams {
		cpus = 8
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
	}
	withName:BamToIntronHint {
		memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
	}	
	withName:runTrinityGuided {
		cpus = params.max_cpus
                memory = { check_max(120.GB * task.attempt, 'memory') }
                time = { check_max(72.h * task.attempt, 'time') }
	}
	withName:runPasa {
                cpus = params.max_cpus
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(120.h * task.attempt, 'time') }
        }
	withName: align_genomes {
		cpus = params.max_cpus
                memory = params.max_memory
                time = { check_max(72.h * task.attempt, 'time') }
	}
	withName: map_gtf {
		time = params.max_time
	}
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 1500.GB
  max_cpus = 24
  max_time = 120.h
}
